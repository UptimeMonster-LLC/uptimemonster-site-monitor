<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards based custom ruleset for your plugin">
	<description>Generally-applicable sniffs for WordPress plugins.</description>

	<!-- What to scan -->
	<file>.</file>
	<exclude-pattern>/vendor/</exclude-pattern>
	<exclude-pattern>/node_modules/</exclude-pattern>
	<exclude-pattern>/src/</exclude-pattern>
	<exclude-pattern>/build/</exclude-pattern>

	<!-- How to scan -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<arg value="sp"/> <!-- Show sniff and progress -->
	<arg name="basepath" value="./"/><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="8"/><!-- Enables parallel processing when available for faster results. -->

	<!-- Rules: Check PHP version compatibility -->
	<!-- https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions -->
	<config name="testVersion" value="7.4-"/>
	<!-- https://github.com/PHPCompatibility/PHPCompatibilityWP -->
	<rule ref="PHPCompatibilityWP"/>

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->
	<config name="minimum_supported_wp_version" value="5.6"/>
	<rule ref="WordPress"/>

	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>includes/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>languages/</exclude-pattern>
		<exclude-pattern>includes/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<!-- Value: replace the function, class, and variable prefixes used. Separate multiple prefixes with a comma. -->
			<property name="prefixes" type="array" value="UptimeMonster,uptimemonster,uptime"/>
		</properties>
	</rule>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Value: replace the text domain used. -->
			<property name="text_domain" type="array" value="uptimemonster-site-monitor"/>
		</properties>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
		<properties>
			<property name="blank_line_check" value="true"/>
		</properties>
	</rule>

	<!--<rule ref="WordPress.PHP.DevelopmentFunctions">
    	group property not found in sniff.
    	<properties>
    		<property name="group" type="array">
    			<element value="error_log" />
    			<element value="dd" />
    			<element value="var_dump" />
    			<element value="var_export" />
    			<element value="print_r" />
    		</property>
    	</properties>
    </rule>-->
	<rule ref="WordPress-Core" />
	<rule ref="WordPress-Extra" />

	<!-- Validate, sanitize, and escape everything. -->
	<rule ref="WordPress.Security"/>
	<rule ref="WordPress.WP"/>

	<!-- Direct database access is prohibited. Instead, make use of the WordPress Database API.. -->
	<rule ref="WordPress.DB"/>

	<!-- All theme text strings must be internationalized and properly escaped so that the theme can be translated and localized without parent theme modifications. -->
	<rule ref="WordPress.WP.I18n"/>

	<!-- WordPress VIP (This is must. Plugin must be pass https://wpvip.com/ PHPCS validation test) -->
	<rule ref="WordPress-VIP-Go" />

	<!-- Other Rules -->

	<!-- Include sniffs for PHP cross-version compatibility. -->
	<rule ref="PHPCompatibility">
		<!-- Marked some internal method with DoubleUnderscore before method name -->
		<exclude name="PHPCompatibility.FunctionNameRestrictions.ReservedFunctionNames.MethodDoubleUnderscore"/>
		<exclude name="PHPCompatibility.Syntax.NewShortArray.Found"/>
		<exclude name="PHPCompatibility.FunctionDeclarations.NewClosure.Found"/>
	</rule>
	<rule ref="PHPCompatibilityWP"/>

	<!-- https://github.com/woocommerce/woocommerce-sniffs/blob/master/src/WooCommerce-Core/ruleset.xml -->

	<!-- Envato/ThemeForest specific -->
	<!-- See https://github.com/wpsh/wpcs-for-envato/blob/master/WPCSForEnvato/ruleset.xml -->

	<!-- Tabs must be used for indentation. -->
	<arg name="tab-width" value="4"/>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<!-- Don't end files with closing PHP tags. -->
	<rule ref="PSR2.Files.ClosingTag"/>

	<!-- The use of PHP short tags is not allowed. -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- Single-statement inline control structures are prohibited. Either curly braces should be used (even where they are optional) or where appropriate the alternative syntax for control structures may be used. -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<!-- Rule: The goto statement must never be used. -->
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- The eval() function must not be used. -->
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>No eval please.</message>
	</rule>

	<!-- The create_function() function has been deprecated as of PHP 7.2.0 and must no longer be used. -->
	<rule ref="WordPress.PHP.RestrictedPHPFunctions"/>

	<!-- The "@" operator must not be used to suppress error messages or notices. -->
	<rule ref="WordPress.PHP.NoSilencedErrors"/>

	<!-- Using the POSIX Regex functions ereg_* arenâ€™t allowed. -->
	<rule ref="WordPress.PHP.POSIXFunctions"/>

	<!-- A few rules not mentioned in the official documentation. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- Checks for empty PHP statements -->
	<rule ref="Generic.CodeAnalysis.EmptyPHPStatement" />

	<!-- Detects empty statement bodies -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement" />

	<!-- Detects for-loops that use a function call in the test expression -->
	<!-- Comment: Bad for performance -->
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall">
		<type>error</type> <!-- Make this an error instead of a warning -->
	</rule>

	<!-- Detects unconditional if- and elseif-statements -->
	<!-- Comment: Hiding code with "if (false)" is sloppy -->
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement">
		<type>error</type> <!-- Make this an error instead of a warning -->
	</rule>

	<!-- Detects unnecessary final modifiers inside of final classes -->
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier">
		<type>error</type> <!-- Make this an error instead of a warning -->
	</rule>

	<!-- Checks for unused function parameters -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
		<type>error</type> <!-- Make this an error instead of a warning -->
	</rule>

	<!-- Detects unnecessary overridden methods that simply call their parent -->
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod">
		<type>error</type> <!-- Make this an error instead of a warning -->
	</rule>

	<!-- Ensures doc blocks follow basic formatting -->
	<rule ref="Generic.Commenting.DocComment">
		<!-- Allow single-line doc comments. See https://github.com/squizlabs/PHP_CodeSniffer/issues/258. -->
		<exclude name="Generic.Commenting.DocComment.ContentAfterOpen" />
		<exclude name="Generic.Commenting.DocComment.ContentBeforeClose" />
		<!-- Don't require short description -->
		<exclude name="Generic.Commenting.DocComment.MissingShort" />
		<!-- Doesn't work well with annotations -->
		<exclude name="Generic.Commenting.DocComment.TagValueIndent" />
	</rule>

	<!-- Other Rules -->
	<rule ref="Generic.Commenting.Todo"/>
	<!-- <rule ref="Generic.Commenting.Fixme"/> -->
	<!-- <rule ref="Generic.Commenting.Xxx"/> -->

	<!-- Allow embedded php tag same line -->
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentBeforeOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentBeforeEnd">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentAfterEnd">
		<severity>0</severity>
	</rule>
	<!-- PHP keywords MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>

	<!-- Visibility MUST be declared on all methods. -->
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

	<!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
	<!-- checked in Methods/MethodDeclarationSniff -->
	<!-- Method names MUST NOT be declared with a space after the method name.
	The opening brace MUST go on its own line, and the closing brace MUST go
	on the next line following the body. There MUST NOT be a space after the
	opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
	<!-- checked in Methods/FunctionClosingBraceSniff -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
		<severity>0</severity>
	</rule>

	<!-- Argument lists MAY be split across multiple lines, where each subsequent
	line is indented once. When doing so, the first item in the list MUST be on
	the next line, and there MUST be only one argument per line. When the argument
	list is split across multiple lines, the closing parenthesis and opening brace
	MUST be placed together on their own line with one space between them. -->
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
		<!-- But Brace should be on the same line as WordPress requires
		it to be on the same line WordPress.WhiteSpace.ControlStructureSpacing.ExtraSpaceAfterCloseParenthesis -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
	</rule>

	<!-- There MUST NOT be more than one statement per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>

	<!-- Code MUST use an indent of 4 spaces -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="ignoreIndentationTokens" type="array">
				<element value="T_COMMENT"/>
				<element value="T_DOC_COMMENT_OPEN_TAG"/>
			</property>
		</properties>
		<exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect"/>
	</rule>

	<!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<!-- Method arguments with default values MUST go at the end of the argument list. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<rule ref="PEAR">
		<exclude-pattern>.</exclude-pattern>
		<exclude name="PEAR.ControlStructures.MultiLineCondition.SpacingAfterOpenBrace"/>
		<exclude name="PEAR.Commenting.FileComment"/>
	</rule>

	<!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
   Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
		<severity>0</severity>
	</rule>
	<rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
		<severity>0</severity>
	</rule>

	<!-- Control Structures -->

	<!-- The general style rules for control structures are as follows:
	There MUST be one space after the control structure keyword
	There MUST NOT be a space after the opening parenthesis
	There MUST NOT be a space before the closing parenthesis
	There MUST be one space between the closing parenthesis and the opening brace
	The structure body MUST be indented once
	The closing brace MUST be on the next line after the body -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<!-- checked in ControlStructures/ControlStructureSpacingSniff -->

	<!-- The body of each structure MUST be enclosed by braces. This standardizes
	how the structures look, and reduces the likelihood of introducing errors as
	new lines get added to the body. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>

	<!-- Require 1 space char after type casting -->
	<rule ref="Generic.Formatting.SpaceAfterCast">
		<properties>
			<property name="spacing" value="1" />
		</properties>
	</rule>

	<rule ref="Generic.Commenting">
		<exclude-pattern>tests/</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.Todo">
		<exclude-pattern>*</exclude-pattern>
	</rule>

	<rule ref="PEAR.Functions.FunctionCallSignature.EmptyLine">
		<exclude-pattern>tests/e2e-tests/</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.LineLength">
		<!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<rule ref="Generic.Arrays.DisallowShortArraySyntax">
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting">
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen">
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments.FoundInControlStructure">
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassAfterLastUsed">
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.LanguageConstructs.NewEmptyNonVariable.Found">
		<!-- Min PHP Requirement is 5.6, so it can be safely ignored. -->
		<exclude-pattern>.</exclude-pattern>
	</rule>
	<rule ref="Universal.Arrays.DisallowShortArraySyntax.Found">
		<exclude-pattern>.</exclude-pattern>
	</rule>
</ruleset>
